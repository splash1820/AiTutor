{
  "title": "Test on basic java",
  "difficulty": "medium",
  "questions": [
    {
      "id": "76cc8881-0ec8-40e9-aedf-a7bf110acc0a",
      "type": "mcq",
      "text": "Which of the following Java statements correctly declares and initializes an array of 5 integers, all with the value 0?",
      "options": [
        "`int[] numbers = {0, 0, 0, 0, 0};`",
        "`int numbers[5] = new int[5];`",
        "`int[] numbers = new int[5];`",
        "`int numbers = new int[5][0];`"
      ],
      "answer": "`int[] numbers = new int[5];`",
      "explanation": "Option C correctly declares an integer array named `numbers` with a size of 5.  The `new int[5]` part allocates space for 5 integers, and they are automatically initialized to their default value, which is 0 for integers. Option A works but is less efficient for larger arrays. Option B is incorrect syntax; while it attempts to initialize to the default value, the syntax is incorrect. Option D creates a 2D array (a 5x0 matrix, which is essentially unusable)."
    },
    {
      "id": "07599f67-60fa-428b-bea4-531b81528e16",
      "type": "code",
      "text": "Write a Java program that takes an integer array as input and returns a new array containing only the even numbers from the input array.  The program should handle potential exceptions, such as null or empty input arrays, and should not modify the original array.  If the input array contains no even numbers, return an empty array.",
      "answer": "def getEvenNumbers(arr):\n    \"\"\"\n    Extracts even numbers from an integer array.\n\n    Args:\n      arr: The input integer array.\n\n    Returns:\n      A new array containing only the even numbers from the input array.\n      Returns an empty array if the input is null, empty, or contains no even numbers.\n\n    Raises:\n      TypeError: if input is not a list or contains non-integer elements.\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return []\n\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"Input array must contain only integers.\")\n\n    even_numbers = [num for num in arr if num % 2 == 0]\n    return even_numbers",
      "test_cases": [
        "Input:  `[1, 2, 3, 4, 5, 6]`\nOutput: `[2, 4, 6]`",
        "Input: `[1, 3, 5, 7]`\nOutput: `[]`"
      ],
      "explanation": "The Python function `getEvenNumbers` first checks for null or empty input. Then it uses a list comprehension to efficiently iterate through the input array and filter out only the even numbers (numbers divisible by 2).  The resulting list of even numbers is returned.  A `TypeError` is raised if the input is not a list of integers.  This solution mirrors the intent of the Java problem, focusing on error handling and efficient even number extraction.  A direct Java translation would follow a very similar structure."
    },
    {
      "id": "523dd6ce-60db-4403-80f9-71cf75f656e6",
      "type": "descriptive",
      "text": "Explain the differences between `==` and `.equals()` when comparing objects in Java, providing examples to illustrate their behavior with String objects and custom-defined classes.  Discuss the implications of not understanding this distinction for potential programming errors.",
      "answer": "In Java, both `==` and `.equals()` are used for comparison, but they operate differently and lead to distinct outcomes, especially when dealing with objects.\n\n`==` is a reference equality operator.  It checks if two references point to the same memory location.  Therefore, `a == b` is true only if `a` and `b` refer to the exact same object instance in memory.\n\n`.equals()`, on the other hand, is a method that checks for logical equality. Its default implementation in the `Object` class behaves the same as `==`, but this behavior can be overridden in subclasses to define what constitutes logical equality for objects of that class.  This is crucial for determining if two objects represent the same value, even if they are distinct objects in memory.\n\n**Example with Strings:**\n\n```java\nString str1 = new String(\"hello\");\nString str2 = new String(\"hello\");\nString str3 = str1;\n\nSystem.out.println(str1 == str2); // false (different memory locations)\nSystem.out.println(str1.equals(str2)); // true (same string content)\nSystem.out.println(str1 == str3); // true (same memory location)\n```\n\nHere, `str1` and `str2` are different String objects, even though they contain the same sequence of characters.  `==` returns `false`, but `.equals()` correctly identifies their logical equivalence.  `str1` and `str3` are references to the same String object, hence both comparisons return true.  The String class overrides the `.equals()` method to perform content comparison.\n\n**Example with a Custom Class:**\n\n```java\nclass Person {\n    String name;\n    int age;\n\n    Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        Person person = (Person) obj;\n        return age == person.age && name.equals(person.name);\n    }\n}\n\nPerson p1 = new Person(\"Alice\", 30);\nPerson p2 = new Person(\"Alice\", 30);\nSystem.out.println(p1 == p2); // false (different objects)\nSystem.out.println(p1.equals(p2)); // true (overridden equals() method considers name and age)\n```\n\nIn this example, we define a `Person` class and override its `equals()` method to compare based on `name` and `age`.  This illustrates how to define logical equality for custom objects.  Failure to override `equals()` would result in the default behavior of `==`, which would incorrectly indicate that `p1` and `p2` are not equal, even if their attributes are identical.\n\n\n**Implications of Misunderstanding:**\n\nNot understanding the difference can lead to:\n\n* **Incorrect comparisons:**  Using `==` where `.equals()` is needed will result in inaccurate comparisons, potentially leading to bugs in applications relying on object equality.\n* **Logic errors:**  Incorrect equality checks can produce unexpected program behavior and make debugging more difficult.\n* **Security vulnerabilities:**  In situations where security depends on accurate object comparison (e.g., user authentication), using `==` instead of a properly implemented `.equals()` can create security holes.",
      "explanation": "A good answer should include these key points: * `==` checks for reference equality (same memory location).\n* `.equals()` checks for logical equality (same value, typically overridden in subclasses).\n* String objects have a custom `.equals()` method for content comparison.\n* Custom classes often require overriding `.equals()` to define logical equality for their instances.\n* Failure to understand the difference can lead to various bugs and security vulnerabilities.\n* A well-implemented `.equals()` method should be consistent, reflexive, symmetric, and transitive.  (These are not explicitly required in the answer, but demonstrating awareness would be beneficial)."
    },
    {
      "id": "05331683-84b1-40c2-88e0-fe9a322d5c3f",
      "type": "mcq",
      "text": "Which of the following statements regarding Java's `String` class is FALSE?",
      "options": [
        "Strings in Java are immutable.",
        "The `+` operator can be used for string concatenation.",
        "Strings are stored in the heap memory.",
        "`String` objects are created using the `new` keyword only."
      ],
      "answer": "`String` objects are created using the `new` keyword only.",
      "explanation": "While you *can* create `String` objects using the `new` keyword (e.g., `String str = new String(\"hello\");`),  it's more common and efficient to create them using string literals (e.g., `String str = \"hello\";`).  The JVM optimizes string literal creation to avoid redundant objects.  Therefore, statement D is false because the `new` keyword isn't the *only* way to create `String` objects."
    },
    {
      "id": "97e735b3-de26-4cbf-8894-ea14c914e4d2",
      "type": "code",
      "text": "Write a Java program that takes an integer array as input and returns a new array containing only the even numbers from the input array.  The program should handle potential exceptions gracefully (e.g., null input). If the input array is null or empty, return an empty array.  The solution should be efficient and avoid unnecessary iterations.",
      "answer": "def getEvenNumbers(input_array):\n    \"\"\"\n    This function takes an integer array as input and returns a new array containing only the even numbers.\n    It handles null or empty input gracefully.\n    \"\"\"\n    if input_array is None or len(input_array) == 0:\n        return []\n    \n    even_numbers = [num for num in input_array if num % 2 == 0]\n    return even_numbers",
      "test_cases": [
        "Input: [1, 2, 3, 4, 5, 6]\nOutput: [2, 4, 6]",
        "Input: []\nOutput: []"
      ],
      "explanation": "The Python solution uses list comprehension for a concise and efficient way to filter even numbers. It first checks for null or empty input and returns an empty list if either is true.  Otherwise, it iterates through the input array and adds only even numbers (numbers divisible by 2) to a new list, which is then returned.  This approach avoids unnecessary iterations and is more efficient than using traditional loops for larger arrays.  A Java equivalent would use streams for similar efficiency."
    }
  ]
}