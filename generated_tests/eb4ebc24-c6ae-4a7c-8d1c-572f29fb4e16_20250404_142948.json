{
  "title": "Test on basic java",
  "difficulty": "medium",
  "questions": [
    {
      "id": "0feb64f4-5cb0-4841-8e78-e126f7aadb09",
      "type": "mcq",
      "text": "Which statement regarding Java's `finally` block is INCORRECT?",
      "options": [
        "A `finally` block always executes, regardless of whether an exception is thrown or caught.",
        "A `finally` block is typically used to release resources, such as closing files or network connections.",
        "A `finally` block can be used to handle exceptions that are thrown within a `try` block.",
        "If a `try` block contains a `return` statement, the `finally` block will execute before the method returns."
      ],
      "answer": "A `finally` block can be used to handle exceptions that are thrown within a `try` block.",
      "explanation": "A `finally` block does not handle exceptions.  It's designed for cleanup actions regardless of whether exceptions occur.  Exception handling is the responsibility of the `catch` block.  While a `finally` block executes before a method returns, even if a return statement is present, it does not itself deal with the exception's handling or propagation."
    },
    {
      "id": "223ba458-60ce-48a2-bdac-56ff48e786cb",
      "type": "code",
      "text": "Write a Java program that takes an integer array as input and returns a new array containing only the even numbers from the input array.  The program should handle potential exceptions gracefully (e.g., null input).  If the input array is empty or contains no even numbers, return an empty array.",
      "answer": "def getEvenNumbers(input_array):\n    \"\"\"\n    Extracts even numbers from an integer array.\n\n    Args:\n        input_array: A list of integers.\n\n    Returns:\n        A new list containing only the even numbers from the input array.\n        Returns an empty list if the input is None, empty, or contains no even numbers.\n    \"\"\"\n    if input_array is None:\n        return []\n    \n    even_numbers = [num for num in input_array if num % 2 == 0]\n    return even_numbers",
      "test_cases": [
        "Input: `[1, 2, 3, 4, 5, 6]`\nExpected Output: `[2, 4, 6]`",
        "Input: `[1, 3, 5, 7]`\nExpected Output: `[]`"
      ],
      "explanation": "The Python solution uses list comprehension for a concise way to filter the input array. It first checks for a null input and returns an empty list if so.  Otherwise, it iterates through the input array and adds each even number (numbers divisible by 2) to a new list, which is then returned. This efficiently handles both edge cases and the core logic.  A Java solution would follow a similar logic using streams or a loop."
    },
    {
      "id": "ada43fe7-afe2-400b-9170-d3f9dcd1e571",
      "type": "descriptive",
      "text": "Explain the differences between `==` and `.equals()` when comparing objects in Java, providing examples to illustrate scenarios where each operator is appropriate and where using one over the other would lead to incorrect results.  Discuss the importance of overriding the `equals()` method.",
      "answer": "In Java, both `==` and `.equals()` are used for comparison, but they operate differently and are suitable for different situations.\n\n`==` is a reference comparison operator.  It checks if two object references point to the same memory location.  In essence, it determines whether two variables refer to the *exact same* object instance.  If they point to the same object, `==` returns `true`; otherwise, it returns `false`.\n\n`.equals()`, on the other hand, is a method that compares the *content* of objects. By default, it behaves the same as `==` (it's inherited from `Object` class). However, it's crucial to override the `equals()` method in custom classes to define how objects of that class should be compared based on their attributes rather than their memory addresses.  Without overriding, comparing two different objects with the same content using `.equals()` will return `false`.\n\n\n**Examples:**\n\n```java\nString str1 = new String(\"hello\");\nString str2 = new String(\"hello\");\nString str3 = str1;\n\nSystem.out.println(str1 == str2); // false (different memory locations)\nSystem.out.println(str1.equals(str2)); // true (same content)\nSystem.out.println(str1 == str3); // true (same memory location)\n\n\nInteger num1 = 10;\nInteger num2 = 10;\n\nSystem.out.println(num1 == num2); // true (Integer caching for small values)\nSystem.out.println(num1.equals(num2)); // true\n\n\nclass Person {\n    String name;\n    int age;\n\n    Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Override equals() method\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        Person person = (Person) obj;\n        return age == person.age && Objects.equals(name, person.name);\n    }\n}\n\nPerson p1 = new Person(\"Alice\", 30);\nPerson p2 = new Person(\"Alice\", 30);\nSystem.out.println(p1 == p2); // false (different memory locations)\nSystem.out.println(p1.equals(p2)); // true (content comparison after override)\n\n```\n\nThe importance of overriding `equals()` lies in providing a meaningful comparison for your custom objects.  Failure to override it results in comparisons based solely on memory addresses, which is often not the desired behavior.  When overriding, it's also generally necessary to override `hashCode()` to maintain consistency (objects that are equal should have equal hash codes).",
      "explanation": "A good answer should include these key points: *   `==` compares object references (memory addresses).\n*   `.equals()` compares object content (by default, it's the same as `==`, but it should be overridden).\n*   Overriding `equals()` is essential for meaningful comparison of custom objects.\n*   When overriding `equals()`,  `hashCode()` should also be overridden to maintain consistency.\n*   Examples demonstrating the differences and the consequences of not overriding `equals()`.\n*   Explanation of Integer caching and its impact on `==` comparison for Integer objects.\n*   Clear and concise explanations, avoiding unnecessary jargon."
    },
    {
      "id": "5fe0b3a3-5ffa-4a65-b7ae-e9a4afe8482e",
      "type": "mcq",
      "text": "Which statement accurately describes the behavior of a `finally` block in a Java `try-catch-finally` statement?",
      "options": [
        "The `finally` block executes only if an exception is thrown within the `try` block.",
        "The `finally` block executes only if no exception is thrown within the `try` block.",
        "The `finally` block executes unconditionally, whether or not an exception is thrown or caught.",
        "The `finally` block executes only if a specific exception type is caught in the `catch` block."
      ],
      "answer": "The `finally` block executes unconditionally, whether or not an exception is thrown or caught.",
      "explanation": "The `finally` block in Java is guaranteed to execute regardless of whether an exception occurs within the `try` block.  It's used for cleanup tasks like closing files or releasing resources, ensuring these actions happen even if errors occur.  Options A, B, and D describe incorrect scenarios for `finally` block execution."
    },
    {
      "id": "10c5896e-8c1f-474f-8b6b-9597fb5ef300",
      "type": "code",
      "text": "Write a Java program that takes an integer array as input and returns a new array containing only the even numbers from the input array.  The program should handle potential exceptions gracefully (e.g., null input). If the input array is empty or contains no even numbers, return an empty array.",
      "answer": "def getEvenNumbers(arr):\n    \"\"\"\n    Returns a new array containing only the even numbers from the input array.\n\n    Args:\n      arr: The input integer array.\n\n    Returns:\n      A new array containing only the even numbers, or an empty array if the input is invalid or contains no even numbers.\n    \"\"\"\n    if arr is None:\n        return []\n    \n    even_numbers = [num for num in arr if num % 2 == 0]\n    return even_numbers",
      "test_cases": [
        "Input: `[1, 2, 3, 4, 5, 6]`\nOutput: `[2, 4, 6]`",
        "Input: `[1, 3, 5, 7]`\nOutput: `[]`"
      ],
      "explanation": "The Python function `getEvenNumbers` first checks if the input array `arr` is None. If it is, an empty list is returned. Otherwise, it uses a list comprehension to iterate through the array. The list comprehension filters the array, keeping only the numbers that are divisible by 2 (even numbers). Finally, the list of even numbers is returned.  A Java solution would follow a very similar logic, using an ArrayList to dynamically build the resulting array and handling null checks explicitly."
    }
  ]
}