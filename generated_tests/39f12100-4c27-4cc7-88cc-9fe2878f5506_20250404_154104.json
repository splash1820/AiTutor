{
  "title": "Test on intro to python",
  "difficulty": "medium",
  "questions": [
    {
      "id": "a87808de-0cc3-4f8e-9b37-83f73ce130dd",
      "type": "mcq",
      "text": "Which of the following statements accurately describes the behavior of Python's `in` operator when used with a list?",
      "options": [
        "It checks if a value is present at a specific index within the list.",
        "It checks if a value is present anywhere within the list, returning `True` if found and `False` otherwise.",
        "It checks if a list is a sublist of another list.",
        "It only works with strings, not lists."
      ],
      "answer": "It checks if a value is present anywhere within the list, returning `True` if found and `False` otherwise.",
      "explanation": "The `in` operator in Python is used to check for membership.  When used with a list, it iterates through the list and returns `True` if the specified value is found as an element within the list, and `False` otherwise.  Options A and C describe different operations (indexing and sublist checking, respectively), while Option D is incorrect as `in` works with lists."
    },
    {
      "id": "bb15a753-1e00-487c-8721-a3672973ddab",
      "type": "code",
      "text": "Write a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the input list, in the same order they appeared.  The function should handle empty lists gracefully and return an empty list in that case.  The function should also not modify the original list.",
      "answer": "def get_even_numbers(numbers):\n    \"\"\"\n    Returns a new list containing only the even numbers from the input list.\n\n    Args:\n      numbers: A list of integers.\n\n    Returns:\n      A new list containing only the even numbers from the input list, \n      in the same order they appeared. Returns an empty list if the input \n      list is empty or contains no even numbers.\n    \"\"\"\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
      "test_cases": [
        "Input: `[1, 2, 3, 4, 5, 6]`\nOutput: `[2, 4, 6]`",
        "Input: `[1, 3, 5, 7]`\nOutput: `[]`"
      ],
      "explanation": "The function iterates through the input list `numbers`. For each number, it checks if the number is even using the modulo operator (`%`). If the remainder when divided by 2 is 0, the number is even, and it's appended to the `even_numbers` list. Finally, the function returns the `even_numbers` list.  The use of a new list ensures the original list remains unchanged."
    },
    {
      "id": "baa4d96b-75ea-4ae4-ae89-0998704a5b21",
      "type": "descriptive",
      "text": "Explain the difference between mutable and immutable data types in Python, providing specific examples of each and illustrating how this distinction impacts code behavior, particularly regarding assignment and modification.  Discuss the implications of this difference for memory management and potential errors.",
      "answer": "In Python, data types are categorized as either mutable or immutable based on whether their values can be changed after creation.  This fundamental distinction significantly affects how we work with data and can lead to unexpected behavior if not understood properly.\n\n**Immutable Data Types:** These data types cannot be changed after they are created.  Any operation that appears to modify an immutable object actually creates a new object with the modified value.  Examples include:\n\n* **Integers (int):**  If you have `x = 5` and then `x = x + 2`, you're not changing the value of the original integer object; you're creating a new integer object with the value 7 and assigning it to `x`.\n* **Floats (float):** Similar to integers, operations like `x = 3.14; x = x * 2` create a new float object.\n* **Strings (str):** Strings are immutable.  Methods like `.upper()` or string concatenation (`+`) create new string objects. For example,  `my_string = \"hello\"; my_string = my_string.upper()` creates a new string \"HELLO\" and assigns it to `my_string`.\n* **Tuples (tuple):** Tuples are immutable sequences. Once a tuple is created, its elements cannot be changed.\n\n**Mutable Data Types:** These data types can be modified after creation.  Changes are made in-place, without creating a new object. Examples include:\n\n* **Lists (list):** Lists are mutable sequences.  You can add, remove, or change elements directly.  For example, `my_list = [1, 2, 3]; my_list.append(4)` modifies the original list.\n* **Dictionaries (dict):** Dictionaries are mutable collections of key-value pairs.  You can add, remove, or modify key-value pairs directly.\n* **Sets (set):** Sets are mutable collections of unique elements.\n\n\n**Impact on Code Behavior:**\n\nThe mutability of a data type significantly impacts how assignment works.  With immutable types, assigning a new value to a variable effectively creates a new object. With mutable types, modifications are made directly to the original object in memory.  This can lead to unexpected behavior if you're not aware of this distinction.  For instance, consider passing a list (mutable) to a function that modifies it.  The changes will be reflected outside the function.  Passing an immutable object like a string, however, won't lead to changes outside the function.\n\n\n**Memory Management Implications:**\n\nThe immutability of certain data types can lead to more efficient memory management in some cases.  Python can often reuse immutable objects (like small integers) which minimizes memory consumption.  However, frequent creation of new immutable objects due to operations on them can also lead to increased memory usage if not managed properly.\n\n\n**Potential Errors:**\n\nA common error arises from misunderstandings of mutability, especially when working with mutable objects as default arguments in functions, or when making assumptions about whether a variable's value is directly changed or a new object is created. Careful consideration of the mutability of your data types is crucial for writing correct and efficient Python code.",
      "explanation": "A good answer should include these key points: * Definition of mutable and immutable data types.\n* Examples of each type (at least 2 examples for each).\n* Explanation of how assignment and modification work differently for each type.\n* Illustration of the impact on code behavior (e.g., function calls).\n* Discussion of memory management implications.\n* Discussion of potential errors stemming from misunderstandings of mutability."
    },
    {
      "id": "b7715ce6-0bac-4deb-a1f8-58be4284b98b",
      "type": "mcq",
      "text": "What will be the output of the following Python code snippet?\n\n```python\nmy_list = [1, 2, 3, 4, 5]\nnew_list = [x**2 for x in my_list if x % 2 != 0]\nprint(new_list)\n```",
      "options": [
        "[1, 4, 9, 16, 25]",
        "[1, 9, 25]",
        "[2, 4]",
        "[1, 3, 5]"
      ],
      "answer": "[1, 9, 25]",
      "explanation": "The list comprehension `[x**2 for x in my_list if x % 2 != 0]` iterates through `my_list`.  The `if x % 2 != 0` condition checks if each element is odd. Only odd numbers (1, 3, 5) are squared (1*1=1, 3*3=9, 5*5=25) and added to `new_list`. Therefore, the output is [1, 9, 25]."
    },
    {
      "id": "32e8f49a-046c-417c-9ed4-563c2919ae7f",
      "type": "code",
      "text": "Write a Python function called `count_vowels_and_consonants` that takes a single string as input and returns a dictionary containing the counts of vowels (a, e, i, o, u) and consonants in the string.  The function should ignore case and non-alphabetic characters.",
      "answer": "def count_vowels_and_consonants(input_string):\n    \"\"\"Counts vowels and consonants in a string, ignoring case and non-alphabetic characters.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    consonant_count = 0\n\n    for char in input_string:\n        if char.isalpha():\n            if char in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n\n    return {\"vowels\": vowel_count, \"consonants\": consonant_count}",
      "test_cases": [
        "Input: \"Hello, World!\"\nOutput: {'vowels': 3, 'consonants': 7}",
        "Input: \"This is a Test String.\"\nOutput: {'vowels': 6, 'consonants': 12}"
      ],
      "explanation": "The function iterates through each character in the input string. It checks if the character is an alphabet using `isalpha()`. If it's an alphabet, it further checks if it's a vowel (present in the `vowels` string).  The counts of vowels and consonants are incremented accordingly. Finally, a dictionary containing the counts is returned."
    }
  ]
}